// Create a "reducer" function that determines what the new state
// should be when something happens in the app
import { createSlice } from '@reduxjs/toolkit';
import { RootState } from 'store';
import { armCPU } from 'hooks';

type SliceState  = {
  cpu: any;
  status: string;
};

const initialState: SliceState  = {
  cpu: armCPU,
  status: 'idle',
};

export const cpuSlice = createSlice({
  name: 'cpu',
  initialState: initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateProgram: (state, action) => {
      state.cpu.program = action.payload.split('\n').filter((line: string) => line !== '');
    },
    runCode: (state, action) => {
      state.cpu.program = action.payload.split('\n').filter((line: string) => line !== '');
      state.cpu.execute(action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
  },
});

export const { updateProgram, runCode } = cpuSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectMemory = (state: RootState) => state.cpu.cpu.memory;
export const selectProgram = (state: RootState) => state.cpu.cpu.program;

export default cpuSlice.reducer;