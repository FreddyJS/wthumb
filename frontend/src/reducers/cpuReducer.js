// Create a "reducer" function that determines what the new state
// should be when something happens in the app
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  cpu: undefined, // Needs to be setted by the app
  memory: [],
  status: 'idle',
};

export const cpuSlice = createSlice({
  name: 'cpu',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setCpu: (state, action) => {
        state.cpu = action.payload;
        state.memory = Array.from(action.payload.memory.data);
    },
    runCode: (state, action) => {
        state.cpu.execute(action.payload);
        state.memory = Array.from(state.cpu.memory.data);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
  },
});

export const { setCpu, runCode } = cpuSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectMemory = (state) => state.cpu.memory;

export default cpuSlice.reducer;