// Create a "reducer" function that determines what the new state
// should be when something happens in the app
import { createSlice } from '@reduxjs/toolkit';
import { RootState } from 'store';
import { armCPU } from 'hooks';
import { armCPU_T, compile_assembly } from 'emulator';

type SliceState  = {
  cpu: armCPU_T;
  assembly: string[];
  error?: string;
};

const initialState: SliceState  = {
  cpu: armCPU,
  assembly: [],
  error: undefined,
};

export const cpuSlice = createSlice({
  name: 'cpu',
  initialState: initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setError: (state, action) => {
      state.error = action.payload;
    },
    updateProgram: (state, action) => {
      const program = compile_assembly(action.payload);
      if (program.error) {
        state.error = program.error.message;
      } else {
        state.error = undefined;
        state.cpu.program = program.ins;
      }
    },
    runCode: (state, action) => {
      const program = compile_assembly(action.payload);
      if (program.error) {
        state.error = program.error.message;
      } else {
        state.cpu.reset();
        state.cpu.load(program.ins);
        state.cpu.run();
        state.error = undefined;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
  },
});

export const { setError, updateProgram, runCode } = cpuSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectMemory = (state: RootState) => state.cpu.cpu.memory;
export const selectProgram = (state: RootState) => state.cpu.cpu.program;
export const selectAssembly = (state: RootState) => state.cpu.assembly;

export default cpuSlice.reducer;